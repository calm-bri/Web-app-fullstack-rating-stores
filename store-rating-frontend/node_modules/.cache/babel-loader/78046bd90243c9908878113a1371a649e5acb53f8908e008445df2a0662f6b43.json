{"ast":null,"code":"var _jsxFileName = \"C:\\\\Assignment_Project_App\\\\Assignment_Roxiler\\\\store-rating-frontend\\\\src\\\\pages\\\\Dashboard\\\\UserDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport api from \"../../api/api\";\nimport { normalizeResponse } from \"../../utils/normalizeResponse\";\nimport StoreCard from \"../../components/StoreCard\";\nimport RatingModal from \"../../components/RatingModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserDashboard = () => {\n  _s();\n  const [stores, setStores] = useState([]);\n  const [userRatings, setUserRatings] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedStore, setSelectedStore] = useState(null);\n  const [rating, setRating] = useState(5);\n  const [comment, setComment] = useState(\"\");\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const [storesRes, ratingsRes] = await Promise.all([api.get(\"/stores\"), api.get(\"/ratings/user\")]);\n        setStores(normalizeResponse(storesRes));\n        setUserRatings(normalizeResponse(ratingsRes));\n      } catch (error) {\n        console.error(\"Error fetching user data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  const submitRating = async storeId => {\n    try {\n      await api.post(\"/ratings\", {\n        storeId,\n        rating,\n        comment\n      });\n      resetModal();\n    } catch (error) {\n      console.error(\"Error submitting rating:\", error);\n    }\n  };\n  const updateRating = async ratingId => {\n    try {\n      await api.put(`/ratings/${ratingId}`, {\n        rating,\n        comment\n      });\n      resetModal();\n    } catch (error) {\n      console.error(\"Error updating rating:\", error);\n    }\n  };\n  const resetModal = () => {\n    setSelectedStore(null);\n    setRating(5);\n    setComment(\"\");\n  };\n  const getUserRatingForStore = storeId => userRatings.find(r => r.storeId === storeId);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"User Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RatingModal, {\n      store: selectedStore,\n      rating: rating,\n      comment: comment,\n      setRating: setRating,\n      setComment: setComment,\n      onSubmit: () => {\n        const existing = getUserRatingForStore(selectedStore.id);\n        existing ? updateRating(existing.id) : submitRating(selectedStore.id);\n      },\n      onClose: resetModal,\n      isUpdating: !!getUserRatingForStore(selectedStore === null || selectedStore === void 0 ? void 0 : selectedStore.id)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stores-grid\",\n      children: stores.length > 0 ? stores.map(store => /*#__PURE__*/_jsxDEV(StoreCard, {\n        store: store,\n        onRate: s => setSelectedStore(s)\n      }, store.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No stores found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(UserDashboard, \"/OW/K61Q+4dNBddZdOI//Nqoa9Q=\");\n_c = UserDashboard;\nexport default UserDashboard;\nvar _c;\n$RefreshReg$(_c, \"UserDashboard\");","map":{"version":3,"names":["React","useState","useEffect","api","normalizeResponse","StoreCard","RatingModal","jsxDEV","_jsxDEV","UserDashboard","_s","stores","setStores","userRatings","setUserRatings","loading","setLoading","selectedStore","setSelectedStore","rating","setRating","comment","setComment","fetchData","storesRes","ratingsRes","Promise","all","get","error","console","submitRating","storeId","post","resetModal","updateRating","ratingId","put","getUserRatingForStore","find","r","children","fileName","_jsxFileName","lineNumber","columnNumber","className","store","onSubmit","existing","id","onClose","isUpdating","length","map","onRate","s","_c","$RefreshReg$"],"sources":["C:/Assignment_Project_App/Assignment_Roxiler/store-rating-frontend/src/pages/Dashboard/UserDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport api from \"../../api/api\";\r\nimport { normalizeResponse } from \"../../utils/normalizeResponse\";\r\nimport StoreCard from \"../../components/StoreCard\";\r\nimport RatingModal from \"../../components/RatingModal\";\r\n\r\nconst UserDashboard = () => {\r\n  const [stores, setStores] = useState([]);\r\n  const [userRatings, setUserRatings] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const [selectedStore, setSelectedStore] = useState(null);\r\n  const [rating, setRating] = useState(5);\r\n  const [comment, setComment] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const [storesRes, ratingsRes] = await Promise.all([\r\n          api.get(\"/stores\"),\r\n          api.get(\"/ratings/user\"),\r\n        ]);\r\n        setStores(normalizeResponse(storesRes));\r\n        setUserRatings(normalizeResponse(ratingsRes));\r\n      } catch (error) {\r\n        console.error(\"Error fetching user data:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  const submitRating = async (storeId) => {\r\n    try {\r\n      await api.post(\"/ratings\", { storeId, rating, comment });\r\n      resetModal();\r\n    } catch (error) {\r\n      console.error(\"Error submitting rating:\", error);\r\n    }\r\n  };\r\n\r\n  const updateRating = async (ratingId) => {\r\n    try {\r\n      await api.put(`/ratings/${ratingId}`, { rating, comment });\r\n      resetModal();\r\n    } catch (error) {\r\n      console.error(\"Error updating rating:\", error);\r\n    }\r\n  };\r\n\r\n  const resetModal = () => {\r\n    setSelectedStore(null);\r\n    setRating(5);\r\n    setComment(\"\");\r\n  };\r\n\r\n  const getUserRatingForStore = (storeId) =>\r\n    userRatings.find((r) => r.storeId === storeId);\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n\r\n  return (\r\n    <div className=\"dashboard-container\">\r\n      <h2>User Dashboard</h2>\r\n\r\n      <RatingModal\r\n        store={selectedStore}\r\n        rating={rating}\r\n        comment={comment}\r\n        setRating={setRating}\r\n        setComment={setComment}\r\n        onSubmit={() => {\r\n          const existing = getUserRatingForStore(selectedStore.id);\r\n          existing ? updateRating(existing.id) : submitRating(selectedStore.id);\r\n        }}\r\n        onClose={resetModal}\r\n        isUpdating={!!getUserRatingForStore(selectedStore?.id)}\r\n      />\r\n\r\n      <div className=\"stores-grid\">\r\n        {stores.length > 0 ? (\r\n          stores.map((store) => (\r\n            <StoreCard\r\n              key={store.id}\r\n              store={store}\r\n              onRate={(s) => setSelectedStore(s)}\r\n            />\r\n          ))\r\n        ) : (\r\n          <p>No stores found.</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserDashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}